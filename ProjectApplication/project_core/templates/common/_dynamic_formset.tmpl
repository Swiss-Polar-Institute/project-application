{% load static %}
{% load crispy_forms_tags %}
{% load crispy_forms_filters %}

{{ form_set.management_form }}
{% if form_set.non_form_errors %}
    {{ form_set|as_crispy_errors }}
{% endif %}

<table id="{{ form_set.prefix }}" class="table table-striped table-sm">
    <tbody>
    {% for form in form_set %}
        <tr>
            <td>
                {% crispy form %}
            </td>
        </tr>
    {% endfor %}
    </tbody>
</table>

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

<script>
    {# This variable needs to be "var" (or nothing) but not const or let. The _dynamic_formset.tmpl can be included #}
    {# multiple times in the samge page. #}
    var jQueryForFormset = $.noConflict(true);
    {#jquery.formset doesn't work with jQuery 3 that we are using in the application#}
    {#Here we load the older one, we use for the formset but we let the $ be the newer version#}
</script>

<script src="{% static 'external/formset/dynamic_formset_highlight_to_remove_row.js' %}"></script>
<script src="{% static 'external/formset/jquery.formset.js' %}"></script>

<script>
    function clean_up_file_fields(row) {
        let file_inputs = $(row).find(".custom-file-input");
        $(file_inputs).each(function (i, file_input) {
            let container_for_file_input = $(file_input).closest('.mb-2');

            $(container_for_file_input).find(".input-group.mb-2").remove();
            $(container_for_file_input).find(".custom-file-input").prop('disabled', false)
            $(container_for_file_input).find('.input-group-text').remove()
        });
    }

    function attach_xdsoft_date_time_picker(row) {
        $(row).find('.xdsoftyearmonthdaypickerinput').each(function (i, value) {
                $(value).datetimepicker(
                    {
                        {% include 'widgets/xdsoft_year_month_day_picker_js_properties.tmpl' %}
                    }
                );
            }
        );

        $(row).find('.xdsoftyearmonthpickerinput').each(function (i, value) {
                $(value).datetimepicker(
                    {
                        {% include 'widgets/xdsoft_year_month_picker_js_properties.tmpl' %}
                    }
                );
            }
        );

        $(row).find('.xdsoftyearmonthdayhourminutepickerinput').each(function (i, value) {
                $(value).datetimepicker(
                    {
                        {% include 'widgets/xdsoft_year_month_day_hour_minute_picker_js_properties.tmpl' %}
                    }
                );
            }
        );
    }

    function clean_autocomplete_fields(row) {
        $(row).find(".select2-hidden-accessible").val(null).trigger("change")
    }

    function clean_combobox_fields(row) {
        $(row).find('.form-control').val("");
    }

    function make_fields_writable(row) {
        $(row).find(":input").attr("disabled", false);
    }

    function hide_delete_links(formset_prefix) {
        // TODO: 'delete-row' comes from formset jQuery Modelset, populate here from jQuery Modelset
        $("#" + formset_prefix + " tbody td").each(function (i, td) {
            let can_be_deleted = $(td).find(".can_be_deleted input").val();
            if (can_be_deleted === "0") {
                $(td).find(".delete-row").each(function (i, delete_row) {
                    $(delete_row).hide();
                });
            }
        });
    }

    function clean_help_text_errors(row) {
        $(row).find(".is-invalid").removeClass('is-invalid')
        $(row).find(".invalid-feedback").remove();
    }

    function clean_card(row) {
        // E.g. the invoice section has a card-header for the "View Comments"
        $(row).find("div.card-header").remove();
    }

    function setup_old_fields_completion_fields(row) {
        // What's happening here is the result of misery of different parts (half) interacting
        // select2 is used for finding authors, photographers, etc. jquery.formset.js has a small modification
        // (search for SPI in jquery.formset.js) so the template and the added new has the correct data-select2-id

        // select2 documentation says that before copying an element needs to be destroyed but this is not supported
        // by jquery.formset.js at the moment.

        // When a row is created by jquery.formset.js the original photographer is then converted to a non-select2
        // field. Here it's converted back to a photographer, but then the added row is converted to a non-select2.
        // Then it's added again.

        // This code needs to be changed to be generalised a bit more and/or jquery.formset.js fixed in different
        // ways how is interacting with select2.

        // This function is not operating on $(row) becasue it is fixing the row that has been copied from.

        $(document).find('.modelselect2').each(function (index, value) {
            let id = value.id;

            // Used for photographer, financial reports, etc.
            if (id.includes('photographer') || id.includes('author') || id.includes('approved_by')) {
                $(value).select2({
                    ajax: {
                        url: '{% url "logged-autocomplete-physical-people" %}',
                        dataType: 'json'
                    },
                    containerCssClass: 'form-control'
                });
            }

            // Used for the Milestones category
            if (id.includes('category')) {
                $(value).select2({
                    ajax: {
                        url: '{% url "logged-grant_management-autocomplete-milestones-names" %}',
                        dataType: 'json'
                    },
                    containerCssClass: 'form-control'
                });
            }
        });

        $(document).find('.modelselect2multiple').each(function (index, value) {
            let id = value.id;

            // Used for organisation names
            if (id.includes('organisation_name')) {
                $(value).select2({
                    ajax: {
                        url: '{% url "autocomplete-organisation-names" %}',
                        dataType: 'json'
                    },
                    containerCssClass: 'form-control'
                });
                console.log($(value));
                console.log(id);
            }
        });
    }

    function delete_message(row) {
        $(row).find('.to-delete').remove();
    }

    function update_and_setup_javascript_file_id_references(row) {
        let ending = '-file';
        let idRegex = new RegExp('(\\d+)' + ending + '$')
        $(row).find('script').each(function (index, value) {
            let match = idRegex.exec(value.id);
            if (match) {
                let oldId = parseInt(match[1]);
                let newId = oldId + 1;

                let oldIdEnding = oldId + '-file';
                let newIdEnding = newId + '-file';
                value.id = value.id.replace(oldIdEnding, newIdEnding);
                value.text = value.text.replace(oldIdEnding, newIdEnding);

                // Sad times, another reason to refactor all this file and the jquery.formset.js
                eval(value.text);
            }
        });
    }

    function replace_invoice_due_by_invoice_header(row) {
        // When adding a new invoice the Header should be "Invoice", not "Invoice due $date_existing_invoice"
        $(row).find('h4').each(function (index, value) {
            let headerText = value.innerText;
            if (headerText.startsWith('Invoice ')) {
                value.innerText = 'Invoice';
            }
        });
    }

    function delete_allow_overbudget_field(row) {
        $(row).find('.allow-overbudget-field').remove()
    }

    jQueryForFormset(function () {
        jQueryForFormset('#{{ form_set.prefix }} tbody tr').formset({
            prefix: '{{ form_set.prefix }}',
            {% if human_type %}
                addText: 'Add another {{ human_type }}',
            {% endif %}
            deleteText: 'Remove',
            added: function (row) {
                // Not in a function because multiple _dynamic_formset.tmpl might exist and hide_delete_links are
                // different for each one. Javascript having a global scope for the functions is a reason to have
                // this anonymous function
                attach_xdsoft_date_time_picker(row);
                make_fields_writable(row);
                hide_delete_links("{{ form_set.prefix }}");
                clean_up_file_fields(row);
                clean_autocomplete_fields(row);
                clean_help_text_errors(row);
                clean_combobox_fields(row);
                clean_card(row);
                setup_old_fields_completion_fields(row);
                delete_message(row);
                update_and_setup_javascript_file_id_references(row);
                replace_invoice_due_by_invoice_header(row);
                delete_allow_overbudget_field(row);
                highlight_row_delete_link_hover(row);
            }
        });
        hide_delete_links("{{ form_set.prefix }}");
        highlight_row_delete_link_hover('#{{ form_set.prefix }}');
    });
</script>
