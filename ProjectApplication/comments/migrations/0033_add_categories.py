# Generated by Django 3.0.5 on 2020-06-02 13:54
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations


def add_categories(apps, schema_editor):
    GrantAgreementAttachmentCategory = apps.get_model('comments', 'GrantAgreementAttachmentCategory')
    GrantAgreementCommentCategory = apps.get_model('comments', 'GrantAgreementCommentCategory')
    GrantAgreementComment = apps.get_model('comments', 'GrantAgreementComment')
    GrantAgreementAttachment = apps.get_model('comments', 'GrantAgreementAttachment')
    InvoiceCommentCategory = apps.get_model('comments', 'InvoiceCommentCategory')
    InvoiceComment = apps.get_model('comments', 'InvoiceComment')
    ProjectComment = apps.get_model('comments', 'ProjectComment')
    ProjectAttachment = apps.get_model('comments', 'ProjectAttachment')
    ProjectCommentCategory = apps.get_model('comments', 'ProjectCommentCategory')
    ProjectAttachmentsCategory = apps.get_model('comments', 'ProjectAttachmentCategory')
    ProposalAttachmentCategory = apps.get_model('comments', 'ProjectAttachmentCategory')
    ProposalCommentCategory = apps.get_model('comments', 'ProposalCommentCategory')
    ProposalEvaluationAttachmentCategory = apps.get_model('comments', 'ProposalEvaluationAttachmentCategory')
    ProposalEvaluationCommentCategory = apps.get_model('comments', 'ProposalEvaluationCommentCategory')

    Category = apps.get_model('comments', 'Category')

    ColourPair = apps.get_model('colours', 'ColourPair')
    Colour = apps.get_model('colours', 'Colour')

    # For unit tests or new databases
    try:
        sunflower = ColourPair.objects.get(description='Sunflower with light font')
    except ObjectDoesNotExist:
        red, _ = Colour.objects.get_or_create(name='red', hex_code='ff0000')
        blue, _ = Colour.objects.get_or_create(name='blue', hex_code='0000ff')
        sunflower = ColourPair.objects.create(description='Sunflower with light font',
                                              background=red,
                                              text=blue)

    try:
        peter_river = ColourPair.objects.get(description='Peter river with light font')
    except ObjectDoesNotExist:
        red, _ = Colour.objects.get_or_create(name='red', hex_code='ff0000')
        blue, _ = Colour.objects.get_or_create(name='blue', hex_code='0000ff')

        peter_river = ColourPair.objects.create(description='Peter river with light font',
                                                background=red,
                                                text=blue)

    try:
        emerald_with_light_font = ColourPair.objects.get(description='Emerald with light font')
    except ObjectDoesNotExist:
        red, _ = Colour.objects.get_or_create(name='red', hex_code='ff0000')
        blue, _ = Colour.objects.get_or_create(name='blue', hex_code='0000ff')

        emerald_with_light_font = ColourPair.objects.create(description='Emerald with light font',
                                                            background=red,
                                                            text=blue)

    try:
        turquoise_with_light_font = ColourPair.objects.get(description='Turquoise with light font')
    except ObjectDoesNotExist:
        red, _ = Colour.objects.get_or_create(name='red', hex_code='ff0000')
        blue, _ = Colour.objects.get_or_create(name='blue', hex_code='0000ff')

        turquoise_with_light_font = ColourPair.objects.create(description='Turquoise with light font',
                                                              background=red,
                                                              text=blue)

    # Creates new categories
    Category.objects.get_or_create(name='Partners', colour=sunflower)
    Category.objects.get_or_create(name='Milestones', colour=peter_river)
    Category.objects.get_or_create(name='Documentation', colour=emerald_with_light_font)
    Category.objects.get_or_create(name='Payment', colour=turquoise_with_light_font)

    for category_name in ['Correspondence', 'Deadline', 'Payment', 'Finance', 'Outreach', 'Reports', 'Evaluation',
                          'Budget', 'Partners', 'Documentation']:
        # Make sure that they exist in the unit tests
        try:
            Category.objects.get(name=category_name)
        except ObjectDoesNotExist:
            Category.objects.create(name=category_name, colour=sunflower)

    # Creates new Categories for the things
    InvoiceComment.objects.all().delete()
    InvoiceCommentCategory.objects.all().delete()
    InvoiceCommentCategory.objects.get_or_create(category=Category.objects.get(name='Correspondence'))
    InvoiceCommentCategory.objects.get_or_create(category=Category.objects.get(name='Deadline'))
    InvoiceCommentCategory.objects.get_or_create(category=Category.objects.get(name='Payment'))

    GrantAgreementComment.objects.all().delete()
    GrantAgreementCommentCategory.objects.all().delete()
    GrantAgreementCommentCategory.objects.get_or_create(category=Category.objects.get(name='Correspondence'))
    GrantAgreementCommentCategory.objects.get_or_create(category=Category.objects.get(name='Deadline'))

    GrantAgreementAttachment.objects.all().delete()
    GrantAgreementAttachmentCategory.objects.all().delete()
    GrantAgreementAttachmentCategory.objects.get_or_create(category=Category.objects.get(name='Correspondence'))

    ProjectComment.objects.all().delete()
    ProjectCommentCategory.objects.all().delete()
    ProjectCommentCategory.objects.get_or_create(category=Category.objects.get(name='Correspondence'))
    ProjectCommentCategory.objects.get_or_create(category=Category.objects.get(name='Finance'))
    ProjectCommentCategory.objects.get_or_create(category=Category.objects.get(name='Outreach'))
    ProjectCommentCategory.objects.get_or_create(category=Category.objects.get(name='Milestones'))
    ProjectCommentCategory.objects.get_or_create(category=Category.objects.get(name='Reports'))

    ProjectAttachment.objects.all().delete()
    ProjectAttachmentsCategory.objects.all().delete()
    ProjectAttachmentsCategory.objects.get_or_create(category=Category.objects.get(name='Correspondence'))
    ProjectAttachmentsCategory.objects.get_or_create(category=Category.objects.get(name='Documentation'))

    ProposalAttachmentCategory.objects.get_or_create(category=Category.objects.get(name='Correspondence'))
    ProposalAttachmentCategory.objects.get_or_create(category=Category.objects.get(name='Documentation'))

    ProposalCommentCategory.objects.get_or_create(category=Category.objects.get(name='Budget'))
    ProposalCommentCategory.objects.get_or_create(category=Category.objects.get(name='Partners'))
    ProposalCommentCategory.objects.get_or_create(category=Category.objects.get(name='Correspondence'))
    ProposalCommentCategory.objects.get_or_create(category=Category.objects.get(name='Deadline'))

    ProposalEvaluationAttachmentCategory.objects.get_or_create(category=Category.objects.get(name='Correspondence'))
    ProposalEvaluationAttachmentCategory.objects.get_or_create(category=Category.objects.get(name='Evaluation'))
    ProposalEvaluationAttachmentCategory.objects.get_or_create(category=Category.objects.get(name='Documentation'))

    ProposalEvaluationCommentCategory.objects.get_or_create(category=Category.objects.get(name='Correspondence'))


class Migration(migrations.Migration):
    dependencies = [
        ('comments', '0032_fix_plurals'),
    ]

    operations = [
        migrations.RunPython(add_categories),
    ]
